{"version":3,"file":"index.mjs","sources":["../src/utils/prompt.ts","../src/utils/conversion.ts","../src/services/openai.ts","../src/services/gemini.ts","../src/index.ts"],"sourcesContent":["import { ReturnType } from '../types';\n\nexport function generatePrompt(query: string, returnType: ReturnType): string {\n  const typeString = getTypeString(returnType);\n  const conversionRules = getConversionRules(returnType);\n  \n  return `\n    Please respond to the following query: \"${query}\"\n    \n    Important: Your response must be ${typeString} without any additional text, explanations, or formatting.\n    Just provide the direct answer that can be parsed as ${typeString}.\n    \n    Response will be converted using these rules:\n    ${conversionRules}\n    \n    Note: If any conversion error occurs, the function will:\n    1. Log the error to stderr\n    2. Return a default value based on the returnType\n  `;\n}\n\nfunction getTypeString(returnType: ReturnType): string {\n  switch (returnType) {\n    case Number:\n      return 'a number only';\n    case Boolean:\n      return 'true or false only';\n    case Array:\n      return 'an array in JSON format';\n    case Object:\n      return 'an object in JSON format';\n    case String:\n      return 'a string';\n    default:\n      return 'a response';\n  }\n}\n\nfunction getConversionRules(returnType: ReturnType): string {\n  switch (returnType) {\n    case Number:\n      return '- Response will be cleaned to keep only digits, decimal points, and minus signs\\n- Will be converted to a number using parseFloat\\n- If conversion fails, will return 0';\n    case Boolean:\n      return '- Response will be converted to lowercase and trimmed\\n- Returns true for: \"true\", \"yes\", \"1\"\\n- Returns false for: \"false\", \"no\", \"0\"\\n- If conversion fails, will return false';\n    case Array:\n      return '- Response must be valid JSON array format\\n- If not an array or invalid JSON, will return empty array []';\n    case Object:\n      return '- Response must be valid JSON object format\\n- If not an object or invalid JSON, will return empty object {}';\n    case String:\n      return '- Response will be returned as is\\n- If conversion fails, will return empty string \"\"';\n    default:\n      return '- Response will be attempted to be parsed as JSON first\\n- If JSON parsing fails, will be used as string\\n- If conversion fails, will return null';\n  }\n} ","import { ReturnType } from '../types';\n\nfunction getTypeName(returnType: ReturnType): string {\n  if (returnType === String) return 'string';\n  if (returnType === Number) return 'number';\n  if (returnType === Boolean) return 'boolean';\n  if (returnType === Array) return 'array';\n  if (returnType === Object) return 'object';\n  return 'unknown';\n}\n\nexport async function convertToType(\n  responseText: string, \n  returnType: ReturnType,\n  retryCount: number = 0,\n  originalQuery: string = '',\n  model: string = '',\n  apiKey: string = '',\n  modelOptions: any = {}\n): Promise<unknown> {\n  try {\n    // Clean response text by removing ```json tags if present\n    const cleanedResponse = responseText.replace(/^```json\\n|\\n```$/g, '');\n    \n    if (returnType === String) {\n      return cleanedResponse;\n    }\n    \n    if (returnType === Number) {\n      const cleanedNumber = cleanedResponse.replace(/[^\\d.-]/g, '');\n      const number = parseFloat(cleanedNumber);\n      if (isNaN(number)) {\n        throw new Error('Could not convert response to number');\n      }\n      return number;\n    }\n    \n    if (returnType === Boolean) {\n      const lowercaseResponse = cleanedResponse.toLowerCase().trim();\n      if (['true', 'yes', '1'].includes(lowercaseResponse)) {\n        return true;\n      } else if (['false', 'no', '0'].includes(lowercaseResponse)) {\n        return false;\n      }\n      throw new Error('Could not convert response to boolean');\n    }\n    \n    if (returnType === Object || returnType === Array) {\n      const parsedJson = JSON.parse(cleanedResponse);\n      \n      if (returnType === Array && !Array.isArray(parsedJson)) {\n        throw new Error('Response is not an array');\n      }\n      \n      if (returnType === Object && (Array.isArray(parsedJson) || typeof parsedJson !== 'object')) {\n        throw new Error('Response is not an object');\n      }\n      \n      return parsedJson;\n    }\n    \n    if (typeof returnType === 'function') {\n      try {\n        const parsedData = JSON.parse(cleanedResponse);\n        return new (returnType as new (data: unknown) => unknown)(parsedData);\n      } catch {\n        return new (returnType as new (data: string) => unknown)(cleanedResponse);\n      }\n    }\n    \n    return cleanedResponse;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    process.stderr.write(`Type conversion error: ${errorMessage}\\n`); \n  \n    if (retryCount < 2 && originalQuery && model && apiKey) {\n      const typeName = getTypeName(returnType);\n      const retryPrompt = `\n        Previous attempt failed with error: \"${errorMessage}\"\n        Original query: \"${originalQuery}\"\n        Expected return type: ${typeName}\n        \n        Please fix your response to match the expected type. Your response must be ${typeName} without any additional text, explanations, or formatting.\n        Just provide the direct answer that can be parsed as ${typeName}.\n      `;\n\n      let retryResponse: string;\n      if (model.toLowerCase().includes('openai')) {\n        const { callOpenAI } = await import('../services/openai');\n        retryResponse = await callOpenAI(retryPrompt, apiKey, modelOptions);\n      } else if (model.toLowerCase().includes('gemini')) {\n        const { callGemini } = await import('../services/gemini');\n        retryResponse = await callGemini(retryPrompt, apiKey, modelOptions);\n      } else {\n        throw new Error(`Unsupported model: ${model}`);\n      }\n\n      return convertToType(retryResponse, returnType, retryCount + 1, originalQuery, model, apiKey, modelOptions);\n    }\n    \n    return getDefaultValue(returnType);\n  }\n}\n\nexport function getDefaultValue(returnType: ReturnType): unknown {\n  if (returnType === Number) return 0;\n  if (returnType === Boolean) return false;\n  if (returnType === Array) return [];\n  if (returnType === Object) return {};\n  if (returnType === String) return '';\n  return null;\n} ","import OpenAI from 'openai';\nimport { AIModelOptions } from '../types';\n\nexport async function callOpenAI(prompt: string, apiKey: string, options: AIModelOptions): Promise<string> {\n  const openai = new OpenAI({ apiKey });\n  \n  const response = await openai.chat.completions.create({\n    model: options.model,\n    messages: [\n      { role: 'system', content: 'You are a function simulator, you strictly need to respond to user query without adding anything extra. Stick to it.'},\n      { role: 'user', content: prompt }\n    ],\n    temperature: options.temperature,\n  });\n\n  return response.choices[0].message.content?.trim() || '';\n} ","import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { AIModelOptions } from '../types';\n\nexport async function callGemini(prompt: string, apiKey: string, options: AIModelOptions): Promise<string> {\n  const genAI = new GoogleGenerativeAI(apiKey);\n  \n  const generativeModel = genAI.getGenerativeModel({ model: options.model });\n  const result = await generativeModel.generateContent({\n    contents: [\n      { role: 'system', parts: [{ text: 'You are a function simulator, you strictly need to respond to user query without adding anything extra. Stick to it.' }] },\n      { role: 'user', parts: [{ text: prompt }] }\n    ],\n    generationConfig: { temperature: options.temperature },\n  });\n\n  return result.response.text().trim();\n} ","import { ReturnType, UniversalMethodOptions } from './types';\nimport { generatePrompt } from './utils/prompt';\nimport { convertToType, getDefaultValue } from './utils/conversion';\nimport { callOpenAI } from './services/openai';\nimport { callGemini } from './services/gemini';\n\nexport async function universalMethod(\n  query: string,\n  returnType: ReturnType = String,\n  options: UniversalMethodOptions = {}\n): Promise<unknown> {\n  try {\n    if (typeof query !== 'string') {\n      throw new Error('Query must be a string');\n    }\n\n    if (![String, Number, Boolean, Object, Array].includes(returnType as any) && \n        typeof returnType !== 'function') {\n      throw new Error('Invalid return type');\n    }\n\n    const model = process.env.UNIVERSAL_METHOD_MODEL || 'openai';\n    const apiKey = process.env.UNIVERSAL_METHOD_KEY;\n\n    if (!apiKey) {\n      throw new Error('API key not found. Please set UNIVERSAL_METHOD_KEY in environment variables.');\n    }\n\n    const prompt = generatePrompt(query, returnType);\n    const modelOptions = {\n      model: options.model || (model.toLowerCase().includes('openai') ? 'gpt-4o' : 'gemini-2.0-flash'),\n      temperature: options.temperature || 0.3\n    };\n    \n    let responseText: string;\n    if (model.toLowerCase().includes('openai')) {\n      responseText = await callOpenAI(prompt, apiKey, modelOptions);\n    } else if (model.toLowerCase().includes('gemini')) {\n      responseText = await callGemini(prompt, apiKey, modelOptions);\n    } else {\n      throw new Error(`Unsupported model: ${model}. Please use 'openai' or 'gemini'.`);\n    }\n\n    return convertToType(responseText, returnType, 0, query, model, apiKey, modelOptions);\n  } catch (error) {\n    process.stderr.write(`UniversalMethod Error: ${error instanceof Error ? error.message : 'Unknown error'}\\n`);\n    return getDefaultValue(returnType);\n  }\n}\n\nexport * from './types'; "],"names":[],"mappings":"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"}